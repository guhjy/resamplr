% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kfold.R, R/tskfold.R
\name{crossv_kfold}
\alias{crossv_kfold}
\alias{crossv_kfold.data.frame}
\alias{crossv_kfold.grouped_df}
\alias{crossv_kfold.default}
\alias{crossv_tskfold.default}
\title{Generate cross-validated k-fold test-training pairs}
\usage{
crossv_kfold(x, k, ...)

\method{crossv_kfold}{data.frame}(x, k = 5L, shuffle = TRUE, ...)

\method{crossv_kfold}{grouped_df}(x, k = 5L, shuffle = TRUE,
  stratify = FALSE, ...)

\method{crossv_kfold}{default}(x, k = 5L, shuffle = TRUE, ...)

\method{crossv_tskfold}{default}(x, k = 5L, ...)
}
\arguments{
\item{x}{A data frame or vector}

\item{k}{The number of folds}

\item{...}{Passed to methods}

\item{shuffle}{If \code{TRUE}, randomly assign observations to folds.
Otherwise, observations are sequentially assigned to folds.}

\item{stratify}{If \code{TRUE}, within each group observations are split
into folds, and those folds combined. If \code{FALSE}, groups are assigned
into folds.}
}
\value{
A data frame with \code{k} rows and the following columns:
\describe{
\item{train}{A list of \code{\link{resample}} objects. Training sets.}
\item{test}{A list of \code{\link{resample}} objects. Test sets.}
\item{.id}{Character vector. ID of the fold.}
}
}
\description{
Generate cross-validated k-fold test-training pairs.
}
\section{Methods (by class)}{
\itemize{
\item \code{default}: The folds split the elements in the vector.
}}

\examples{
# Example originally from modelr::crossv_mc
library("purrr")
library("dplyr")

# 5-fold cross-validation
cv1 <- crossv_kfold(mtcars, k = 5)
models <- map(cv1$train, ~ lm(mpg ~ wt, data = .))
summary(map2_dbl(models, cv1$test, modelr::rmse))

# k-fold by group
cv2 <- crossv_kfold(group_by(mtcars, cyl), k = 2)
models <- map(cv2$train, ~ lm(mpg ~ wt, data = .))
summary(map2_dbl(models, cv2$test, modelr::rmse))

# stratified k-fold
cv3 <- crossv_kfold(group_by(mtcars, am), k = 3, stratify = TRUE)
models <- map(cv3$train, ~ lm(mpg ~ wt, data = .))
summary(map2_dbl(models, cv3$test, modelr::rmse))
}
