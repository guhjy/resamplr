% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/holdout.R
\name{holdout_frac}
\alias{holdout_frac}
\alias{holdout_frac.data.frame}
\alias{holdout_frac.grouped_df}
\alias{holdout_frac.default}
\alias{holdout_n}
\alias{holdout_n.data.frame}
\alias{holdout_n.grouped_df}
\alias{holdout_n.default}
\title{Generate cross-validation test-training pairs}
\usage{
holdout_frac(x, ...)

\method{holdout_frac}{data.frame}(x, p = 0.3, k = 1, shuffle = TRUE, ...)

\method{holdout_frac}{grouped_df}(x, p = p, k = k, shuffle = shuffle,
  stratify = FALSE, ...)

\method{holdout_frac}{default}(x, p = 0.3, k = 1L, shuffle = TRUE, ...)

holdout_n(x, ...)

\method{holdout_n}{data.frame}(x, n = 1L, k = 1L, shuffle = TRUE, ...)

\method{holdout_n}{grouped_df}(x, n = 1L, k = 1L, shuffle = TRUE,
  stratify = FALSE, ...)

\method{holdout_n}{default}(x, n, k = 1, shuffle = TRUE, ...)
}
\arguments{
\item{x}{A data table or vector.}

\item{...}{Arguments passed to methods.}

\item{p}{Fraction in the test set.}

\item{k}{Number of test/train splits to generate.}

\item{shuffle}{If \code{TRUE}, the observations are randomly assigned to the
test and training sets. If \code{FALSE}, then the last \code{p} or
\code{n} of the observations are assigned to the training set, and
the remainder of the observations are assigned to the test set.}

\item{stratify}{If \code{TRUE}, then test-train splits are within each
code group, so that the final test and train subsets have approximately
equal proportions of each group. If \code{FALSE}, the the test-train splits
splits groups into the testing and training sets.}

\item{n}{Number in the test set.}
}
\value{
A data frame
}
\description{
\code{holdout_frac} splits the data so that proportion \code{p} is in test
set and \code{1 - p} is in the training set. Likewise, \code{holdout_n}
splits the data so that \code{n} elements are in the test set and the
remainder are in the training set.
}
\examples{
# Example originally from modelr::crossv_mc
library("purrr")
library("dplyr")

# holdout three obs, repeat 10 times
cv1 <- holdout_n(mtcars, n = 3, k = 10)
models <- map(cv1$train, ~ lm(mpg ~ wt, data = .))
summary(map2_dbl(models, cv1$test, modelr::rmse))

# holdout two groups at a time in the test set
# repeat four times.
cv2 <- holdout_n(group_by(mtcars, cyl), n = 2, k = 4)
models <- map(cv2$train, ~ lm(mpg ~ wt, data = .))
summary(map2_dbl(models, cv2$test, modelr::rmse))

# stratified holdout
# holdout 1 obs each from each group. repeat 5 times.
cv2 <- holdout_n(group_by(mtcars, am), n = 1, k = 5, stratified = TRUE)
models <- map(cv2$train, ~ lm(mpg ~ wt, data = .))
summary(map2_dbl(models, cv2$test, modelr::rmse))
}
